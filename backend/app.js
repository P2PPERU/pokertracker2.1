require("dotenv").config();
const express = require("express");
const cors = require("cors");
const compression = require("compression");

// üìä NUEVAS IMPORTACIONES PARA M√âTRICAS
const eventRoutes = require("./routes/eventRoutes");
const metricRoutes = require("./routes/metricRoutes");
const trackingMiddleware = require("./middleware/trackingMiddleware");
const CronJobs = require("./utils/cronJobs");

// ‚úÖ Rutas existentes
const jugadorRoutes = require("./routes/jugadorRoutes");
const userRoutes = require("./routes/userRoutes");
const adminRoutes = require("./routes/adminRoutes");
const favoritesRoutes = require("./routes/favoritesRoutes");
const manosRoutes = require("./routes/manosRoutes");

const app = express();

// ‚úÖ Middleware global
app.use(cors());
app.use(express.json({ limit: '10mb' })); // Aumentar l√≠mite a 10MB
app.use(compression());

// üìä INICIALIZAR TABLAS DE M√âTRICAS (una sola vez al arrancar)
app.use(trackingMiddleware.initializeTables);

// ‚úÖ Ruta de bienvenida
app.get("/", (req, res) => {
  res.json({
    message: "üöÄ Bienvenido a la API de PokerTracker 2.0",
    version: "2.1.0",
    metrics_enabled: true,
    timestamp: new Date().toISOString()
  });
});

// üìå RUTAS DE AUTENTICACI√ìN (con tracking)
app.use("/api/auth", 
  trackingMiddleware.trackLogin,      // Trackear logins
  trackingMiddleware.trackRegistration, // Trackear registros
  userRoutes
);

// üìä NUEVAS RUTAS DE M√âTRICAS Y EVENTOS
app.use("/api/events", eventRoutes);
app.use("/api/metrics", metricRoutes);

// üìå RUTAS EXISTENTES (con tracking donde corresponda)
app.use("/api/favoritos", 
  trackingMiddleware.trackFavoriteAction('added'),  // Para POST
  trackingMiddleware.trackFavoriteAction('removed'), // Para DELETE
  favoritesRoutes
);

app.use("/api/manos", manosRoutes);

// üéØ Rutas de jugadores (con tracking de b√∫squedas)
app.use("/api", 
  trackingMiddleware.trackPlayerSearch,  // Trackear b√∫squedas
  trackingMiddleware.trackAIAnalysis,    // Trackear an√°lisis IA
  jugadorRoutes
);

app.use("/api/admin", adminRoutes);

// üöÄ INICIALIZAR CRON JOBS
CronJobs.initializeAllJobs();

// üöÄ Puerto del servidor
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ Servidor corriendo en el puerto ${PORT}`);
  console.log(`üìä Sistema de m√©tricas activado`);
  console.log(`‚è∞ Cron jobs programados`);
  console.log(`üîó Endpoints disponibles:`);
  console.log(`   üìà GET /api/metrics/dashboard - Dashboard de m√©tricas`);
  console.log(`   üìä GET /api/events/stats - Estad√≠sticas de eventos`);
  console.log(`   üîÑ POST /api/metrics/calculate - Calcular m√©tricas manualmente`);
});

// üõ°Ô∏è Manejo de errores global
process.on('unhandledRejection', (err) => {
  console.error('‚ùå Unhandled Promise Rejection:', err);
});

process.on('uncaughtException', (err) => {
  console.error('‚ùå Uncaught Exception:', err);
  process.exit(1);
});